- hosts: 127.0.0.1
  connection: local

  tasks:
    - name: install pyenv packages
      # these should have been installed manually when installing pyenv
      # but just in case...
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - zlib-devel
        - bzip2
        - bzip2-devel
        - readline-devel
        - sqlite
        - sqlite-devel
        - openssl-devel

    - name: install ansible packages
      # these should have been installed manually when installing ansible
      # but just in case...
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - libffi-devel
        - redhat-rpm-config
        - python-devel

    - name: install basic packages
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - i3
        - i3lock
        - xautolock        # lock screen after an amount of inactivity
        - xbacklight       # adjust screen brightness
        - tmux
        - rabbitmq-server
        - redis
        - patch
        - libyaml-devel    # for compiling ruby versions
        - gdbm-devel       # for compiling ruby versions
        - htop
        - gcc-c++
        - openldap-devel   # for python ldap package (mind)
        - libxml2-devel    # for lxml.etree (mind)
        - libxslt-devel    # for lxml.etree (mind)

    # -----------------------------------------------------
    #
    # Need to enable rabbitmq management plugin
    # sudo rabbitmq-plugins enable rabbitmq_management
    #
    # -----------------------------------------------------

    - name: install postgres
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - postgresql-server
        - postgresql-contrib
        - postgresql-devel
      notify:
        - init postgres

    - name: Install emacs
      dnf: name=emacs state=present
      become: yes

    - name: install emacs Live packs
      shell: "{{ item }}"
      with_items:
        - rmdir .emacs.d
        - git clone https://github.com/overtone/emacs-live.git .emacs.d
        - make -C .emacs.d/packs/stable/org-pack/lib/org-mode autoloads
        # - mkdir --parents .live-packs/{{ ansible_user_id }}-pack
        # - cp -R .emacs.d/packs/template/user-template-pack .live-packs/{{ ansible_user_id }}-pack
        - git clone --recursive git@gh.leapfrogonline.com:JFosco/emacs-live-jfosco-pack.git .live-packs/{{ ansible_user_id }}-pack
        - echo "(live-add-packs '(~/.live-packs/jfosco-pack))" > .emacs-live.el
      args:
        chdir: $HOME
        creates: .emacs-live.el

    # - name: install rpmfusion repo for ffmpeg
    #   become: yes
    #   dnf:
    #     name: 'https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm'
    #     disable_gpg_check: yes
    #     state: present

    # install ffdmpeg to play video on twitter
    # must first install the rpmfusion-free repo using
    # sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    # or whatever command is suggested at https://rpmfusion.org/Configuration
    # I attemptesd to do this automatically using the above commented out step "install rpmfusion repo for ffmpeg"
    # but was unable to make this work
    - name: install ffmpeg
      become: yes
      dnf:
        name: ffmpeg
        enablerepo: rpmfusion
        state: present

    - name: install chrome
      become: yes
      dnf:
        name: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
        disable_gpg_check: yes
        state: present

    - name: install firefox developer edition
      shell: "{{ item }}"
      with_items:
        - ./firefox_developer_edition.sh
      args:
        creates: /opt/firefox-developer/firefox/firefox

    - name: install applications
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - keepassxc

    - name: install ImageMagick (v6) for fox
      become: yes
      dnf:
        name: ImageMagick-6.9.3.0
        state: present
        # to make certain this is not updated by dnf
        # add the line
        # exclude=ImageMagick
        # to the dnf config file (/etc/dnf/dnf.conf)

    - name: install packages for lfo apps
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - GraphicsMagick   # for fox with ImageMagick v. 6
        - npm
        - vsftpd # ftp server for testing psh apps
        - lftp   # ftp command for terminal

    - name: install nodenv
      shell: "{{ item }}"
      with_items:
        - git clone https://github.com/nodenv/nodenv.git ~/.nodenv
      args:
        chdir: $HOME
        creates: ~/.nodenv
      notify: setup nodenv

      # **************************************************
      #  Things I am testing

    - name: install docker
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - docker




  handlers:
    # not really tested
    - name: init postgres
      become: yes
      shell: "{{ item }}"
      with_items:
        - postgresql-setup --initdb --unit postgresql
        - systemctl enable postgresql
      # still need to create your user and create default db

    - name: setup nodenv
      shell: "{{ item }}"
      with_items:
        - cd ~/.nodenv && src/configure && make -C src
        - echo 'export PATH="$HOME/.nodenv/bin:$PATH"' >> ~/.bash_profile
        - eval "$(nodenv init -)"
        - git clone https://github.com/nodenv/node-build.git ~/.nodenv/plugins/node-build
      args:
        chdir: $HOME

    # not really tested
    - name: install node-build-update-defs
      shell: "{{ item }}"
      with_items:
        - git clone https://github.com/nodenv/node-build-update-defs.git ~/.nodenv/plugins/node-build-update-defs
      args:
        creates: ~/.nodenv/plugins/node-build-update-defs

# TO BE ADDED TO THIS
#  - install for rbenv
#  - install for ruby-build


# NOTES
# currently for LFO apps libsodium 0.5.0 must be installed
# also you mest export LD_LIBRARY_PATH="/usr/local/lib"
#
# must also symlink libreadline for python shell
#   cd /usr/lib64
#   sudo ln -s libreadline.so.7.0 libreadline.so.6
#
# Generate and add your ssh key to github before running
#
# For Postgres
# add your userid with superuser privilidges
# in /var/lib/pgsql/data/pg_hba.conf (or wherever pg_hba.conf is)
# change all entries that are "ident" under METHOD to "trust"
#
# For Chrome
# need to figure out how to not download .rpm every time
#
# For Firefox Developer Edition
# need to add Alias in .bashrc/.bash_profile to distinguish from system firefox
# alias firefoxd='nohup /opt/firefox-developer/firefox/firefox &>/dev/null &'
#
